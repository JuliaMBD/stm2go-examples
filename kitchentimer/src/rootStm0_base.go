// This file was generated by a program.
// Please do not edit this file directly.
package testpackage

import (
// package names to be imported
)

type rootStm0State uint8
const (
rootStm0TimerStart rootStm0State = iota
rootStm0Alarm
rootStm0TimerSet
)

var rootStm0Eod Eod
var rootStm0CurrentState rootStm0State
var rootStm0NextState rootStm0State

func init() {
rootStm0Initialize()
}

func rootStm0Initialize() {
rootStm0Eod = Entry
rootStm0CurrentState = rootStm0TimerSet
rootStm0NextState = rootStm0TimerSet
}

func EntryrootStm0Task() {
rootStm0Task()
rootStm0Update()
}

func rootStm0Task() {
switch rootStm0CurrentState {
case rootStm0TimerSet:
if rootStm0Eod == Entry {
rootStm0TimerSetEntry()
rootStm0Eod = Do
}
if rootStm0Eod == Do {
rootStm0TimerSetDo()
if rootStm0TimerSetStartCond() {
rootStm0TimerSetStartAction()
rootStm0NextState = rootStm0TimerStart
rootStm0Eod = Exit
}
}
if rootStm0Eod == Exit {
rootStm0TimerSetExit()
rootStm0Eod = Entry
}
case rootStm0TimerStart:
if rootStm0Eod == Entry {
rootStm0TimerStartEntry()
rootStm0Eod = Do
}
if rootStm0Eod == Do {
rootStm0TimerStartDo()
if rootStm0TimerStartAlarmOnCond() {
rootStm0TimerStartAlarmOnAction()
rootStm0NextState = rootStm0Alarm
rootStm0Eod = Exit
}
if rootStm0TimerStartStopCond() {
rootStm0TimerStartStopAction()
rootStm0NextState = rootStm0TimerSet
rootStm0Eod = Exit
}
}
if rootStm0Eod == Exit {
rootStm0TimerStartExit()
rootStm0Eod = Entry
}
case rootStm0Alarm:
if rootStm0Eod == Entry {
rootStm0AlarmEntry()
rootStm0Eod = Do
}
if rootStm0Eod == Do {
rootStm0AlarmDo()
if rootStm0AlarmAlarmOffCond() {
rootStm0AlarmAlarmOffAction()
rootStm0NextState = rootStm0TimerSet
rootStm0Eod = Exit
}
}
if rootStm0Eod == Exit {
rootStm0AlarmExit()
rootStm0Eod = Entry
}
}
}

func rootStm0Update() {
switch rootStm0CurrentState {
case rootStm0TimerSet:
TimerSetStm1Update() // Call the update for TimerSetStm1
case rootStm0TimerStart:
TimerStartStm2Update() // Call the update for TimerStartStm2
case rootStm0Alarm:
AlarmStm3Update() // Call the update for AlarmStm3
}
rootStm0CurrentState = rootStm0NextState
}

