// This file was generated by a program.
package testpackage
import (
// package names to be imported
)
///////////////////////////////////////////////
// functions for State rootStm0TimerSet
///////////////////////////////////////////////

func rootStm0TimerSetEntry() {
TimerSetStm1Initialize() // Call the initialize for TimerSetStm1
if debug {
logger.Println("Entering State rootStm0TimerSet")
}
displayClock(min, sec)
}

func rootStm0TimerSetDo() {
TimerSetStm1Task() // Call the task for TimerSetStm1
// Please write a do process for State rootStm0TimerSet
}

func rootStm0TimerSetExit() {
if debug {
logger.Println("Leaving State rootStm0TimerSet")
}
// Please write an exit process for State rootStm0TimerSet
}

///////////////////////////////////////////////
// functions for State rootStm0TimerStart
///////////////////////////////////////////////

func rootStm0TimerStartEntry() {
TimerStartStm2Initialize() // Call the initialize for TimerStartStm2
if debug {
logger.Println("Entering State rootStm0TimerStart")
}
// Please write an enter process for State rootStm0TimerStart
}

func rootStm0TimerStartDo() {
TimerStartStm2Task() // Call the task for TimerStartStm2
// Please write a do process for State rootStm0TimerStart
}

func rootStm0TimerStartExit() {
if debug {
logger.Println("Leaving State rootStm0TimerStart")
}
// Please write an exit process for State rootStm0TimerStart
}

///////////////////////////////////////////////
// functions for State rootStm0Alarm
///////////////////////////////////////////////

func rootStm0AlarmEntry() {
AlarmStm3Initialize() // Call the initialize for AlarmStm3
if debug {
logger.Println("Entering State rootStm0Alarm")
}
count=0
}

func rootStm0AlarmDo() {
AlarmStm3Task() // Call the task for AlarmStm3
sing(); count+=1
}

func rootStm0AlarmExit() {
if debug {
logger.Println("Leaving State rootStm0Alarm")
}
stop()
}

///////////////////////////////////////////////
// Conditions
///////////////////////////////////////////////

func rootStm0TimerSetStartCond() bool {
return TimerSetStm1CurrentState == TimerSetStm1StartPush && !button3
}

func rootStm0TimerStartAlarmOnCond() bool {
return min == 0 && sec == 0
}

func rootStm0TimerStartStopCond() bool {
return TimerStartStm2CurrentState == TimerStartStm2StopPush && !button3
}

func rootStm0AlarmAlarmOffCond() bool {
return count == 5*Sec1 || (AlarmStm3CurrentState == AlarmStm3Push && !button1 && !button2 && !button3)
}

///////////////////////////////////////////////
// Actions
///////////////////////////////////////////////

func rootStm0TimerSetStartAction() {
// Please edit the action when Start occurs at State TimerSet
}

func rootStm0TimerStartAlarmOnAction() {
// Please edit the action when AlarmOn occurs at State TimerStart
}

func rootStm0TimerStartStopAction() {
// Please edit the action when Stop occurs at State TimerStart
}

func rootStm0AlarmAlarmOffAction() {
// Please edit the action when AlarmOff occurs at State Alarm
}

